// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//#include "MarchTables.compute"


static const int edgeTable[256] = {
    0x0, 0x7, 0x19, 0x1e, 0x62, 0x65, 0x7b, 0x7c, 0xa8, 
    0xaf, 0xb1, 0xb6, 0xca, 0xcd, 0xd3, 0xd4, 0x304, 
    0x303, 0x31d, 0x31a, 0x366, 0x361, 0x37f, 0x378, 0x3ac, 0x3ab, 0x3b5, 
    0x3b2, 0x3ce, 0x3c9, 0x3d7, 0x3d0, 0x510, 0x517, 0x509, 0x50e, 0x572, 0x575, 
    0x56b, 0x56c, 0x5b8, 0x5bf, 0x5a1, 0x5a6, 0x5da, 0x5dd, 0x5c3, 0x5c4, 0x614, 
    0x613, 0x60d, 0x60a, 0x676, 0x671, 0x66f, 0x668, 0x6bc, 0x6bb, 0x6a5, 0x6a2, 
    0x6de, 0x6d9, 0x6c7, 0x6c0, 0xa40, 0xa47, 0xa59, 0xa5e, 0xa22, 0xa25, 0xa3b, 
    0xa3c, 0xae8, 0xaef, 0xaf1, 0xaf6, 0xa8a, 0xa8d, 0xa93, 0xa94, 0x944, 0x943, 
    0x95d, 0x95a, 0x926, 0x921, 0x93f, 0x938, 0x9ec, 0x9eb, 0x9f5, 0x9f2, 0x98e, 
    0x989, 0x997, 0x990, 0xf50, 0xf57, 0xf49, 0xf4e, 0xf32, 0xf35, 0xf2b, 0xf2c, 
    0xff8, 0xfff, 0xfe1, 0xfe6, 0xf9a, 0xf9d, 0xf83, 0xf84, 0xc54, 0xc53, 0xc4d, 
    0xc4a, 0xc36, 0xc31, 0xc2f, 0xc28, 0xcfc, 0xcfb, 0xce5, 0xce2, 0xc9e, 0xc99, 
    0xc87, 0xc80, 0xc80, 0xc87, 0xc99, 0xc9e, 0xce2, 0xce5, 0xcfb, 0xcfc, 0xc28, 
    0xc2f, 0xc31, 0xc36, 0xc4a, 0xc4d, 0xc53, 0xc54, 0xf84, 0xf83, 0xf9d, 0xf9a, 
    0xfe6, 0xfe1, 0xfff, 0xff8, 0xf2c, 0xf2b, 0xf35, 0xf32, 0xf4e, 0xf49, 0xf57, 
    0xf50, 0x990, 0x997, 0x989, 0x98e, 0x9f2, 0x9f5, 0x9eb, 0x9ec, 0x938, 0x93f, 
    0x921, 0x926, 0x95a, 0x95d, 0x943, 0x944, 0xa94, 0xa93, 0xa8d, 0xa8a, 0xaf6, 
    0xaf1, 0xaef, 0xae8, 0xa3c, 0xa3b, 0xa25, 0xa22, 0xa5e, 0xa59, 0xa47, 0xa40, 
    0x6c0, 0x6c7, 0x6d9, 0x6de, 0x6a2, 0x6a5, 0x6bb, 0x6bc, 0x668, 0x66f, 0x671, 
    0x676, 0x60a, 0x60d, 0x613, 0x614, 0x5c4, 0x5c3, 0x5dd, 0x5da, 0x5a6, 0x5a1, 
    0x5bf, 0x5b8, 0x56c, 0x56b, 0x575, 0x572, 0x50e, 0x509, 0x517, 0x510, 0x3d0, 
    0x3d7, 0x3c9, 0x3ce, 0x3b2, 0x3b5, 0x3ab, 0x3ac, 0x378, 0x37f, 0x361, 0x366, 
    0x31a, 0x31d, 0x303, 0x304, 0xd4, 0xd3, 0xcd, 0xca, 0xb6, 0xb1, 0xaf, 0xa8, 
    0x7c, 0x7b, 0x65, 0x62, 0x1e, 0x19, 0x7, 0x0
};

static const int cubeEdges[24] = {
    0, 1, 0, 2, 0, 4, 1, 3, 1, 5, 2, 3, 2, 6, 3, 7, 4, 5, 4, 6, 5, 7, 6, 7
};

struct Ball {
	float strength;
    float radius;
	float3 position;
};

struct Vertex {
    int id;
    float3 pos;
    float3 normal;
};

struct Triangle {
    int a, b, c;
};

RWStructuredBuffer<Vertex> vertexBuffer;
AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<Ball> metaballs;
RWStructuredBuffer<float3> cubePositions;

int numBalls;
int3 numVoxels;
//int numCubesPerAxis;
float threshold;
float cubeLength;
float gridCenter;
/*
float metaballFalloffFunction(float factor, float3 dist) {
	return factor / (dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);
}
*/

float metaballFalloffFunction(float strength, float radius, float3 dist) {
    float di2 = (dist.x * dist.x + dist.y * dist.y + dist.z * dist.z);
	float tmp = (di2/(radius*radius))-1;
    float res = strength * tmp * tmp * tmp * tmp;
    return res;
}

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (threshold - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

float3 interpolateVerts(float3 v1, float3 v2, float w1, float w2) {
    float t = (threshold - w1) / (w2 - w1);
    return v1 + t * (v2-v1);
}


float surfaceFunction(float3 pos)  {
    float val = 0;
    for (int i = 0; i < numBalls; i++){
        float3 dist = pos - metaballs[i].position;
        if (length(dist) < metaballs[i].radius) {
            val += metaballFalloffFunction(metaballs[i].strength, metaballs[i].radius, dist);
        }
    }
    return val;
}

Triangle GetTriangle(int a, int b, int c) {
    Triangle tri;
    tri.a = a;
    tri.b = b;
    tri.c = c;
    return tri;
}


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numVoxels.x || id.y >= numVoxels.y || id.z >= numVoxels.z) {
        return;
    }
    int idx = id.x + id.y * numVoxels.x + id.z * numVoxels.x * numVoxels.y;
    float3 centerPos = cubePositions[idx];// + gridCenter;
    float4 cubeCorners[8] = {
        float4(-cubeLength, -cubeLength, -cubeLength, 0),
        float4(cubeLength, -cubeLength, -cubeLength, 0),
        float4(-cubeLength, cubeLength, -cubeLength, 0),
        float4(cubeLength, cubeLength, -cubeLength, 0),
        float4(-cubeLength, -cubeLength, cubeLength, 0),
        float4(cubeLength, -cubeLength, cubeLength, 0),
        float4(-cubeLength, cubeLength, cubeLength, 0),
        float4(cubeLength, cubeLength, cubeLength, 0),
    };
    

    float3 normals[8] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    float cubeWidth = cubeLength * 2;

    uint i = 0;
    for (i = 0; i < 8; i++) {
        cubeCorners[i].xyz += centerPos;
        cubeCorners[i].w = surfaceFunction(cubeCorners[i].xyz);
    }


    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < threshold) cubeIndex += 1; 
    if (cubeCorners[1].w < threshold) cubeIndex += 2;
    if (cubeCorners[2].w < threshold) cubeIndex += 4;
    if (cubeCorners[3].w < threshold) cubeIndex += 8;
    if (cubeCorners[4].w < threshold) cubeIndex += 16;
    if (cubeCorners[5].w < threshold) cubeIndex += 32;
    if (cubeCorners[6].w < threshold) cubeIndex += 64;
    if (cubeCorners[7].w < threshold) cubeIndex += 128;

    if (cubeIndex == 0 || cubeIndex == 255) {
        return;
    }

    for (i = 0; i < 8; i++) {
        normals[i].x = surfaceFunction(cubeCorners[i].xyz  + float3(cubeWidth, 0, 0));
        normals[i].x -= surfaceFunction(cubeCorners[i].xyz  - float3(cubeWidth, 0, 0));


        normals[i].y = surfaceFunction(cubeCorners[i].xyz  + float3(0, cubeWidth, 0));
        normals[i].y -= surfaceFunction(cubeCorners[i].xyz  - float3(0, cubeWidth, 0));


        normals[i].z = surfaceFunction(cubeCorners[i].xyz  + float3(0, 0,cubeWidth));
        normals[i].z -= surfaceFunction(cubeCorners[i].xyz  - float3(0, 0, cubeWidth));

        normals[i] = normalize(normals[i]);
    }

    int crossings = 0;
    float3 vertex = float3(0,0,0);
    float3 normal = float3(0,0,0);

    int mask = edgeTable[cubeIndex];
    for (i = 0; i < 12; ++i) {
        if ((mask & (1 << i)) == 0) {
            continue;
        }

        crossings += 1;
        int a = cubeEdges[i*2];
        int b = cubeEdges[i*2+1];
        vertex += interpolateVerts(cubeCorners[a], cubeCorners[b]);
        normal += -interpolateVerts(normals[a], normals[b], cubeCorners[a].w, cubeCorners[b].w);
    }

    vertex /= crossings;
    normal /= crossings;
    int vid = vertexBuffer.IncrementCounter();

    Vertex v;
    v.id = idx;
    v.pos = vertex;
    v.normal = normal;
    vertexBuffer[vid] = v;

    const int R[3] = {1, numVoxels.x, numVoxels.x * numVoxels.y};
    const int pos[3] = {id.x, id.y, id.z};
    for (i = 0; i < 3; i++) {
        if ((mask & (1 << i)) == 0) {
            continue;
        }

        //i - Axes, iu, iv - Ortho Axes
		uint iu = (i + 1) % 3;
		uint iv = (i + 2) % 3;

        if (pos[iu] == 0 || pos[iv] == 0) {
            continue;
        }

        uint du = R[iu];
        uint dv = R[iv];

        //Flip Orientation Depending on Corner Sign
        if ((cubeIndex & 1) == 1)
        {   
            triangles.Append(GetTriangle(idx, idx-du-dv, idx-du));
            triangles.Append(GetTriangle(idx, idx-dv, idx-du-dv));
        }
        else
        {
            triangles.Append(GetTriangle(idx, idx-du-dv, idx-dv));
            triangles.Append(GetTriangle(idx, idx-du, idx-du-dv));
        }
    }
}
